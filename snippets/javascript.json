{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"logg": {
		"prefix": "logg",
		"body": [
			"console.log($1);$2",
		],
		"description": "Log output to console"
	},
	"logv": {
		"prefix": "logv",
		"body": [
			"console.log(`$1: ${$1}`);$2",
		],
		"description": "Log output to console"
	},
	"logvv": {
		"prefix": "logvv",
		"body": [
			"console.log('$1: ', $1);$2",
		],
		"description": "Log output to console"
	},
	"logp": {
		"prefix": "logp",
		"body": [
			"console.log(JSON.stringify($1, null, 2));$2",
		],
		"description": "Log output to console"
	},
	"logpp": {
		"prefix": "logpp",
		"body": [
			"console.log('$1:', JSON.stringify($1, null, 2));$2",
		],
		"description": "Log output to console"
	},
	"llll": {
		"prefix": "ll",
		"body": [
			"() => {",
			"  $1",
			"}"
		],
		"description": "Lambda"
	},
	"edebug": {
		"prefix": "edebug",
		"body": [
			"LOG_TRANSITIONS: true,",
			"LOG_TRANSITIONS_INTERNAL: true,$1"
		],
		"description": "Ember debugger properties"
	},
	"eget": {
		"prefix": "eget",
		"body": [
			"this.get('$1');$2"
		],
		"description": "Ember get property"
	},
	"eeget": {
		"prefix": "eeget",
		"body": [
			"const $1 = this.get('$1');$2"
		],
		"description": "Ember get property"
	},
	"eslintignore": {
		"prefix": "eslintignore",
		"body": [
			"// eslint-disable-next-line $1"
		],
		"description": "Disable next line eslint"
	}
}
